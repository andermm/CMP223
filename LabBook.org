#+TITLE: LabBook
#+AUTHOR: Anderson Mattheus Maliszewski
#+STARTUP: overview indent
#+TAGS: noexport(n) deprecated(d) 
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w!) | DONE(d!) CANCELLED(c!) DEFERRED(f!)

This LabBook is for the *CMP223 - Computer System Performance* *Analysis
(2019/2)* final work and has the step-by-step procedure used during the
proposed experiments. Also, to reproduce this evaluation, you can
follow the steps below. Have fun!

#+BEGIN_QUOTE
*Reporting errors*: This repository has several links to self-contained
 files as well as links from the Internet, so if you try to reproduce
 it and find broken links or other problems, please tell me everything
 so that I can improve it. :)
#+END_QUOTE

* Experimental Project
** Objective
   Assess the impact of the network interconnection on HPC
   applications. Both *InfiniBand (IB)* and *Gigabit Ethernet (ETH)*, as
   well as *IP-over-IB (IPoIB)* interconnections were evaluated using
   the same physical cluster of servers. The MPI-PingPong benchmark of
   the [[https://software.intel.com/en-us/articles/intel-mpi-benchmarks][Intel MPI Benchmarks]] suite was executed to first characterize
   interconnect latency and throughput. Then two synthetic benchmarks
   (NPB and ImbBench) and one real application (Alya) were
   executed. [[https://www.nas.nasa.gov/publications/npb.html][NAS Parallel Benchmarks (NPB)]] set version 3.4 with input
   *class D* was used because it represent several patterns of real HPC
   applications, as well as being characterized as a balanced
   benchmarks sed (when and MPI parallel application makes balanced
   use of processes and consequently they all end almost together). On
   the other hand, [[https://github.com/Roloff/ImbBench.git][Inbalanced Benchmark (IMB)]] was created to represent
   the more common inbalanced application patterns. Thus, with both of
   the mentioned benchmarks we cover the common HPC application and
   also the balanced and unbalanced patterns. [[https://www.bsc.es/research-development/research-areas/engineering-simulations/alya-high-performance-computational][Alya]] was used because
   this work tends to cover not only synthetic benchmarks which try to
   mimic real applications but rather use a real application and
   evaluate them. In the next session the benchmarks are described
   more detail.

** Benchmarks
Below the benchmarks used are described.
*** Intel MPI Benchmark
The IntelÂ® MPI Benchmarks perform a set of MPI performance
measurements for point-to-point and global communication operations
for a range of message sizes. The generated benchmark data fully
characterizes:
- Performance of a cluster system, including node performance, network
  latency, and throughput.
- Efficiency of the MPI implementation used.
There are several benchmarks included in this set, and in this
evaluation, only the MPI1 PingPong application was used to measure
interconnect latency and throughput.

*** NAS Parallel Benchmarks
The NAS Parallel Benchmarks (NPB) are a small set of programs designed
to help evaluate the performance of parallel supercomputers. The
benchmarks are derived from computational fluid dynamics (CFD)
applications. Problem sizes in NPB are predefined and indicated as
different classes.

In this evaluation, the original set of benchmarks from the NPB suite,
consisting of five kernels and three pseudo-applications were used
with the Messsage Passing Interface (MPI) parallel implementation.

Five Kernels:
- *IS* - Integer Sort, random memory access.
- *EP* - Embarrassingly Parallel.
- *CG* - Conjugate Gradient, irregular memory access and communication.
- *FT* - Discrete 3D fast Fourier Transform, all-to-all communication.
- *MG* - Multi-Grid on a sequence of meshes, long- and short-distance
  communication, memory intensive.

Three pseudo-applications: 
- *BT* - Block Tri-diagonal solver.
- *SP* - Scalar Penta-diagonal solver.
- *LU* - Lower-Upper Gauss-Seidel solver.

They were executed with 128 processes on 4 nodes, 32 processes per
node, in the case of IS, EP, CG, FT, MG, and LU (power-of-two). Since
BT and SP require the number of processes to be a square root, 144
processes were used, with 36 processes in each node.

*** Inbalanced Benchmark
Imbalance Benchmark (ImbBench) is a set of MPI-based applications,
created by the Ph.D. Student Eduardo Roloff, that simulate several
behaviors in terms of process loads. ImbBench was designed with the
heterogeneity of the cloud in mind, and its goal is to help the user
to choose the most suitable configuration to execute an application in
the cloud. ImbBench distributes the load among all the available
processes according to a preselected imbalance pattern.

ImbBench has a set of microbenchmarks and parameters to benchmark CPU
and Memory. In this evaluation, it was used both CPU and Memory
benchmarks with the 8Level pattern of imbalance and the Rand and BST
microbenchmarks, respectively.

*** Alya
Alya is a high performance computational mechanics code to solve
complex coupled multi-physics / multi-scale / multi-domain problems,
which are mostly coming from the engineering realm. Among the
different physics solved by Alya we can mention:
incompressible/compressible flows, non-linear solid mechanics,
chemistry, particle transport, heat transfer, turbulence modeling,
electrical propagation, etc.

** How to Reproduce it
To reproduce this project, the first step is to to clone the git repository in
the *$HOME* of the desired cluster of servers. 

#+begin_src shell :results output :exports both
cd $HOME; git clone https://github.com/andermm/CMP223
#+end_src

Here it is assumed that your HOME directory is exported with NFS. If
you don't have the NFS configured, [[https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-16-04][here]] is a tutorial to do it. If
this step is ok, go ahead to the other topics.

** Software Installation
To execute the experiments, some required packages need to
be installed. They are:
- openmpi-bin - High performance message passing library (mpiexec).
- libopenmpi-dev - High performance message passing library (mpicc and
  mpifort).
- gfortran - GNU Fortran 95 compiler.
- cmake - Cross-platform, open-source make system.
- pajeng - Space-time view and associated tools for Paje trace files.

If your OS is Debian based and you have permission to install new
packages, you can install the required packages using the [[SH/software_install.sh][Software
Installer]] script. On the other hand, if you do not have permission to
do so, you can use the Spack package manager. The full tutorial on how
to use Spack can be seen [[https://spack-tutorial.readthedocs.io/en/latest/][here]].

** System Information 
   To collect the information of all nodes used in the evaluation, it
   was used the [[SH/sys_info_collect.sh][System Information Collect]] script, which creates the
   [[LOGS/env_info.org][System Information]] log output with ORG extension. The script
   is executes automatically in the execution script.

** Network Infrastructure Information
Each node has a Mellanox MT27600 Channel Adapter (CA) configured for
the InfiniBand 56 Gb/s 4X FDR ConnectX-3 with firmware version
10.16.1038 and OFED version 4.6-1.0.1.1. All nodes are interconnected
through a Mellanox SX6036 FDR and a generic de 1 Gbps switch.

** Design of Experiments
   To execute benchmarks without bias, the DoE.base library was used
   to create Experiment Design (DoE). In DoE, two factors were used,
   applications and interface, with 30 random replications, totaling
   1080 (12 * 3 * 30) distinct executions. For the characterization of
   the applications, one random replication was performed totaling 33
   (11 * 3) distinct executions (the MPI PingPong benchmark was not
   performed in the characterization step).

Execution factors:
- Factor 1 - Apps: The applications name totaling 12 (~exec_bt~,
  ~exec_ep~, ~exec_cg~, ~exec_mg~, ~exec_lu~, ~exec_sp~, ~exec_is~, ~exec_ft~,
  ~exec_imb_memory~, ~exec_imb_CPU~, ~exec_intel~, and ~exec_alya~).
- Factor 2 - Interface: The network interface name, totaling 3 (~eth~,
  ~ib~, ~ipoib~).

Characterization factors:
- Factor 1 - Apps: The applications name totaling 11 (~charac_bt~,
  ~charac_ep~, ~charac_cg~, ~charac_mg~, ~charac_lu~, ~charac_sp~, ~charac_is~,
  ~charac_ft~, ~charac_imb_memory~, ~charac_imb_CPU~, and ~charac_alya~).
- Factor 2 - Interface: The network interface name, totaling 3 (~eth~,
  ~ib~, ~ipoib~).

Below is the R block of code which generate the CSV files.
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)
library(DoE.base)
library(tidyverse)

set.seed(0)
  cmp223_exec <- fac.design(factor.names = list(
    apps = c("exec_bt", "exec_ep", "exec_cg", "exec_mg", "exec_lu",
             "exec_sp", "exec_is", "exec_ft", "exec_imb_memory",
             "exec_imb_CPU", "exec_intel", "exec_alya"),
    interface = c("eth", "ib", "ipoib")),
    replications=30,
    randomize=TRUE)

cmp223_exec %>%
  select(-Blocks) %>%
  mutate(number=1:n()) -> cmp223_exec
write_csv(cmp223_exec, "R/experimental_project_exec.csv")
#+end_src

#+RESULTS:
: 
: creating full factorial with 36 runs ...

#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)
library(DoE.base)
library(tidyverse)

set.seed(0)
  cmp223_charac <- fac.design(factor.names = list(
    apps = c("charac_bt", "charac_ep", "charac_cg", "charac_mg", "charac_lu",
             "charac_sp", "charac_is", "charac_ft", "charac_imb_memory",
             "charac_imb_CPU", "charac_alya"),
    interface = c("eth", "ib", "ipoib")),
    replications=1,
    randomize=TRUE)

cmp223_charac %>%
  mutate(number=1:n()) -> cmp223_charac
write_csv(cmp223_charac, "R/experimental_project_charac.csv")
#+end_src

#+RESULTS:
: 
: creating full factorial with 33 runs ...

** Bash Scripts Descriptions
- [[SH/experiments_exec.sh][Experiments Execution]] - This is the most essential script for this
  evaluation. It comprises from the beggining, when the variables are
  defined, until the end, when the experiments execution ends. To
  describe it, it has been divided into a few steps, which are:

  - *Step 1*: Define the variables and Create the Folders - Here all the
    variables with folder, software and bencharmark locations are
    defined and created.
  - *Step 2*: Collect System Information - In this step, the Execution
    Experiments script calls the System Information script to collect
    information about all nodes used in the evaluation.
  - *Step 3*: Download and Compile the Programs - Here all the softwares
    and benchmarks are donwloaded and compiled with their respective
    compilers.
  - *Step 4*: Define Machine Files and Experimental Project - In this
    step the machine files and experimental project used during MPI
    execution are defined.
  - *Step 5*: Read the Experimental Project and Start the Execution
    Loop - This step reads the experimental project, start the MPI
    command line, executes the experiments with their respective
    interconnection and binaries. At the end of each execution, the
    results are sent to the their respective log files.
  - *Step 6*: Call the Experiment Characterization Script - This final
    step calls the experiment characterization script to start the
    characterization execution. Characterization and "normal"
    execution are done one after another because in characterization
    execution there is the trace process that records all the MPI
    primitives in a file and therefore can interfer in the normal
    execution considering resources usage (e.g., IO) at the end of
    execution.
- [[SH/experiments_charac.sh][Experiments Characterization]] - 
- [[SH/central.sh][Central]] - This script was created to allocate the nodes using the
  ~salloc~ command from Slurm Workload Manager and then pass the bash
  script execution command through ssh to start the Experiments
  Execution.
- [[SH/software_install.sh][Software Installation]] - This script is basically a simple loop to
  check whether packages within the 'name' vector are installed or
  not. If so, them ok. Otherwise, install the packages that are not
  installed. This script assume that the user has sudo
  privilegies. Otherwise, go to the *Software Installation* session,
  which will describe how to install the software using Spack packet
  manager.
- [[SH/sys_info_collect.sh][System Information Collect]] - This is a crucial script to performance
  evaluations, which executes before the benchmarks. It saves all the
  system information and sends the output to an ORG file. This output
  will undoubtedly help describe the results or even add system
  information to the paper/report.

** Experiments Execution
The scripts in this work are designed for use in a cluster with Slurm
job scheduler. Here, to start the experiments, the [[SH/central.sh][central script]] was
first executed, which allocates the necessary nodes, in this case,
hype2, hype3, hype4, and hype5, and passes through ssh the bash
command that calls the [[SH//experiments_exec.sh][experiments execution]] script. This script first
calls the [[SH/sys_info_collect.sh][system information]] script to collect system
information. Next, it executes the experiments and, at the end,
requests that the [[SH/experiments_charac.sh][experiments characterization]] script to start the
characterization execution.

To reproduce this evaluation in an environment without Slurm job
scheduler, simply clone this repository into the server's HOME
directory, set the server names in the PARTITION variable ([[SH/experiments_exec.sh][experiments
execution]] script line 66), adjust the machine files in [[MACHINE_FILES][Machine Files]]
folder also with the name of the servers, adjust the number of
processes (in [[SH/experiments_exec.sh][experiments execution]] script lines 237, 240, 243 and,
246 and in [[SH/experiments_charac.sh][experiments characterization]] script lines 93, 96 and, 99)
to be used during the execution, respecting the power of two or square
root requirements, and finally executes the [[SH/experiments_exec.sh][experiments execution]]
script like a normal bash script.

** Graphical Analysis 
After the conclusion of the experiments, in this topic, graphs
containing the execution time and the characterization of the
applications were created. The first step is to read the CSV
file. 
Next, four graphs are created according to the number of
processes, in which BT and SP have 121, and according to a similar
execution time range.

*** Read CSVs
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)
library("tidyverse")
df_intel <- read_csv("/home/anderson/Desktop/LOGS/intel.22-11-2019.16h44m04s.csv")
df_apps <- read_csv("/home/anderson/Desktop/LOGS/apps_exec.22-11-2019.16h44m04s.csv")
    
df_apps %>%
      group_by(apps,interface) %>%
      summarise(
        average=mean(time),
        std=sd(time),
        ste=3*std/sqrt(n()),
        N=n()) %>%
      arrange(apps,interface) -> df_apps
df_apps

df_intel %>%
  filter(bytes != 0) %>%
  group_by(interface,bytes) %>%
  summarise(
    average=mean(time),
    std=sd(time),
    ste=3*std/sqrt(n()),
    N=n()) %>%
  arrange(interface,bytes) -> df_intel_latency
df_intel_latency

df_intel %>%
  filter(bytes != 0) %>%
  group_by(interface,bytes) %>%
  summarise(
    average=mean(`mbytes-sec`),
    std=sd(`mbytes-sec`),
    ste=3*std/sqrt(n()),
    N=n()) %>%
  arrange(interface,bytes) -> df_intel_band
df_intel_band

#+end_src

#+RESULTS:
#+begin_example

ââ Attaching packages âââââââââââââââââââââââââââââââââââââââ tidyverse 1.2.1 ââ
â ggplot2 3.2.1     â purrr   0.3.2
â tibble  2.1.3     â dplyr   0.8.3
â tidyr   1.0.0     â stringr 1.4.0
â readr   1.3.1     â forcats 0.4.0
ââ Conflicts ââââââââââââââââââââââââââââââââââââââââââ tidyverse_conflicts() ââ
â dplyr::filter() masks stats::filter()
â dplyr::lag()    masks stats::lag()

Parsed with column specification:
cols(
  apps = col_character(),
  interface = col_character(),
  bytes = col_double(),
  time = col_double(),
  `mbytes-sec` = col_double()
)

Parsed with column specification:
cols(
  apps = col_character(),
  interface = col_character(),
  time = col_double()
)

# A tibble: 33 x 6
# Groups:   apps [11]
   apps      interface average   std   ste     N
   <
    <
      <
<
<
<int>
 1 exec_alya eth         298.  2.01  1.82     11
 2 exec_alya ib          254.  1.80  1.63     11
 3 exec_alya ipoib       280.  1.03  0.932    11
 4 exec_bt   eth         504.  1.50  1.42     10
 5 exec_bt   ib          382.  3.48  3.15     11
 6 exec_bt   ipoib       545.  2.44  2.21     11
 7 exec_cg   eth         753.  2.70  2.44     11
 8 exec_cg   ib          184.  1.10  1.05     10
 9 exec_cg   ipoib       181.  1.68  1.59     10
10 exec_ep   eth          37.3 0.135 0.128    10
# â¦ with 23 more rows

# A tibble: 69 x 6
# Groups:   interface [3]
   interface bytes average    std    ste     N
   <
    <
  <
 <
 <
<int>
 1 eth           1    6.43 0.484  0.459     10
 2 eth           2    6.29 0.421  0.399     10
 3 eth           4    6.22 0.395  0.374     10
 4 eth           8    6.11 0.318  0.302     10
 5 eth          16    6.04 0.252  0.239     10
 6 eth          32    5.99 0.184  0.175     10
 7 eth          64    5.99 0.140  0.133     10
 8 eth         128    5.98 0.124  0.117     10
 9 eth         256    5.98 0.105  0.0997    10
10 eth         512    6.00 0.0890 0.0844    10
# â¦ with 59 more rows

# A tibble: 69 x 6
# Groups:   interface [3]
   interface bytes average     std     ste     N
   <
    <
  <
  <
  <
<int>
 1 eth           1   0.156 0.00966 0.00917    10
 2 eth           2   0.319 0.0213  0.0202     10
 3 eth           4   0.647 0.0383  0.0363     10
 4 eth           8   1.31  0.0648  0.0615     10
 5 eth          16   2.65  0.106   0.100      10
 6 eth          32   5.34  0.159   0.151      10
 7 eth          64  10.7   0.244   0.231      10
 8 eth         128  21.4   0.441   0.419      10
 9 eth         256  42.9   0.763   0.724      10
10 eth         512  85.3   1.25    1.18       10
# â¦ with 59 more rows
#+end_example
*** PingPong - Latency
#+begin_src R :results output graphics :file R/PLOTS/PingPong.png :exports both :width 600 :height 400 :session *R* 
ggplot(df_intel_latency,aes(x=bytes, y=average)) +
  geom_line(aes(col = interface), alpha = 1) +
  geom_point(aes(col = interface), size = 2.5) +
  geom_errorbar(aes(ymin=average-ste, ymax=average+ste, color=interface, group=interface), width = .25) +
  theme_bw() +
  scale_y_log10(breaks=c(0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024)) +
  scale_x_log10(breaks=c(0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304)) +
  ylab('Average Latency Time\n(Microseconds in Logscale)') +
  xlab('Message Size (Bytes)') +
  scale_colour_manual(values=c("#808080", "#000000", "#4F4F4F"), name="Network Interface",
                    breaks=c("ib", "ipoib", "eth"),
                    labels=c("InfiniBand", "IP-over-IB", "Ethernet")) +
  theme (legend.position = c(0.2, 0.8),
         legend.background = element_rect(color = "black", size = 0.3, linetype = "solid"),
         axis.title=element_text(size=16), 
         legend.title = element_text(color = "black", size = 16),
         legend.text = element_text(color = "black", size = 16),
         axis.text.x = element_text(angle=55, hjust=1, size =14, color = "black"),
         axis.text.y = element_text(size =14, color = "black"))
#+end_src

#+RESULTS:
[[file:R/PLOTS/PingPong.png]]

*** PingPong - Bandwidth
#+begin_src R :results output graphics :file R/PLOTS/Bandwidth.png :exports both :width 600 :height 400 :session *R* 
ggplot(df_intel_band,aes(x=bytes, y=average)) +
  geom_line(aes(col = interface), alpha = 1) +
  geom_point(aes(col = interface), size = 2.5) +
  geom_errorbar(aes(ymin=average-ste, ymax=average+ste, color=interface, group=interface), width = .25) +
  theme_bw() +
  scale_y_log10(breaks=c(0.1, 1, 10, 100, 1000, 10000)) +
  scale_x_log10(breaks=c(0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304)) +
  ylab('Average Bandwidth\n(Megabytes per Second in Logscale)') +
  xlab('Message Size (Bytes)') +
  scale_colour_manual(values=c("#808080", "#000000", "#4F4F4F"), name="Network Interface",
                    breaks=c("ib", "ipoib", "eth"),
                    labels=c("InfiniBand", "IP-over-IB", "Ethernet")) +
  theme (legend.position = c(0.2, 0.8),
         legend.background = element_rect(color = "black", size = 0.3, linetype = "solid"),
         axis.title=element_text(size=16), 
         legend.title = element_text(color = "black", size = 16),
         legend.text = element_text(color = "black", size = 16),
         axis.text.x = element_text(angle=55, hjust=1, size =14, color = "black"),
         axis.text.y = element_text(size =14, color = "black"))
#+end_src

#+RESULTS:
[[file:R/PLOTS/Bandwidth.png]]

*** BT-SP(144 Procs)
#+begin_src R :results output graphics :file R/PLOTS/BT_SP.png :exports both :width 600 :height 400 :session *R*
labs <- c(exec_bt ="BT", exec_sp="SP")
df_apps$interface <- factor(df_apps$interface,
levels=c("ib", "ipoib", "eth"))

ggplot(df_apps[df_apps$apps %in% c("exec_bt", "exec_sp"), ] , aes(x=reorder(apps, +average), y=average, fill=interface)) +
geom_bar(stat="identity", position = "dodge", width = 0.3) +
geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=.05, position = position_dodge(.3)) +
theme_bw() +
scale_fill_manual(values=c("#303030", "#888888", "#BEBEBE"),
breaks=c("ib", "ipoib", "eth"), labels=c("InfiniBand", "IP-over-IB", "Ethernet")) +
theme(legend.position = "top", 
      legend.background = element_rect(color = "black", size = 0.3, linetype = "solid"),
      axis.text.x = element_text(size =14, color = "black"),
      axis.text.y = element_text(size =14, color = "black"),
      axis.title=element_text(size=16), 
      legend.title = element_blank(),
      legend.text = element_text(color = "black", size = 16)) +
      scale_x_discrete(labels=labs) +
      labs(x="Application", y="Execution Time in Seconds") + 
      facet_wrap(.~apps, scales="free")+
      theme(strip.background = element_blank(),
            strip.text.x = element_blank())
     
#+end_src

#+RESULTS:
[[file:R/PLOTS/BT_SP.png]]

*** EP-IS-MG(128 Procs)
#+begin_src R :results output graphics :file R/PLOTS/EP_IS_MG.png :exports both :width 600 :height 400 :session *R* 
try <- c(exec_ep="EP", exec_is="IS",exec_mg= "MG")
df_apps$interface <- factor(df_apps$interface,
levels=c("ib", "ipoib", "eth"))

ggplot(df_apps[df_apps$apps %in% c("exec_ep", "exec_is", "exec_mg"), ] , aes(x=apps, y=average, fill=interface)) +
geom_bar(stat="identity", position = "dodge", width = 0.5) +
geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=.1, position = position_dodge(.5)) +
theme_bw() +
scale_fill_manual(values=c("#303030", "#888888", "#BEBEBE"),
breaks=c("ib", "ipoib", "eth"), labels=c("InfiniBand", "IP-over-IB", "Ethernet")) +
theme(legend.position = "top", 
      legend.background = element_rect(color = "black", size = 0.3, linetype = "solid"),
      axis.text.x = element_text(size =14, color = "black"),
      axis.text.y = element_text(size =14, color = "black"),
      axis.title=element_text(size=16), 
      legend.title = element_blank(),
      legend.text = element_text(color = "black", size = 16)) +
      scale_x_discrete(labels=try) +
      labs(x="Application", y="Execution Time in Seconds") +
      facet_wrap(.~apps, scales="free")+
      theme(strip.background = element_blank(),
            strip.text.x = element_blank())
     

#+end_src

#+RESULTS:
[[file:R/PLOTS/EP_IS_MG.png]]
*** CG-LU-FT(128 Procs)
#+begin_src R :results output graphics :file R/PLOTS/CG_LU_FT.png :exports both :width 600 :height 400 :session *R* 
labs <- c(exec_cg="CG",exec_lu="LU", exec_ft="FT")
df_apps$interface <- factor(df_apps$interface,
levels=c("ib", "ipoib", "eth"))

ggplot(df_apps[df_apps$apps %in% c("exec_cg", "exec_lu", "exec_ft"), ] , aes(x=apps, y=average, fill=interface)) +
geom_bar(stat="identity", position = "dodge", width = 0.4) +
geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=.1, position = position_dodge(.4)) +
theme_bw() +
scale_fill_manual(values=c("#303030", "#888888", "#BEBEBE"),
breaks=c("ib", "ipoib", "eth"), labels=c("InfiniBand", "IP-over-IB", "Ethernet")) +
theme(legend.position = "top", 
      legend.background = element_rect(color = "black", size = 0.3, linetype = "solid"),
      axis.text.x = element_text(size =14, color = "black"),
      axis.text.y = element_text(size =14, color = "black"),
      axis.title=element_text(size=16), 
      legend.title = element_blank(),
      legend.text = element_text(color = "black", size = 16)) +
      scale_x_discrete(labels=labs) +
      labs(x="Application", y="Execution Time in Seconds") +
      facet_wrap(.~apps, scales="free") +
      theme(strip.background = element_blank(),
            strip.text.x = element_blank())
     

#+end_src

#+RESULTS:
[[file:R/PLOTS/CG_LU_FT.png]]
*** Alya-IMB(160 Procs)
#+begin_src R :results output graphics :file R/PLOTS/Alya-IMB.png :exports both :width 600 :height 400 :session *R*  
labs <- c(exec_alya="ALYA", exec_imb_memory="IMB_Memory", exec_imb_CPU="IMB_CPU")
df_apps$interface <- factor(df_apps$interface,
levels=c("ib", "ipoib", "eth"))

ggplot(df_apps[df_apps$apps %in% c("exec_alya", "exec_imb_memory", "exec_imb_CPU"), ] , aes(x=apps, y=average, fill=interface)) +
geom_bar(stat="identity", position = "dodge", width = 0.5) +
geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=.1, position = position_dodge(.5)) +
theme_bw() +
scale_fill_manual(values=c("#303030", "#888888", "#BEBEBE"),
breaks=c("ib", "ipoib", "eth"), labels=c("InfiniBand", "IP-over-IB", "Ethernet")) +
theme(legend.position = "top", 
      legend.background = element_rect(color = "black", size = 0.3, linetype = "solid"),
      axis.text.x = element_text(size =14, color = "black"),
      axis.text.y = element_text(size =14, color = "black"),
      axis.title=element_text(size=16), 
      legend.title = element_blank(),
      legend.text = element_text(color = "black", size = 16)) +
      scale_x_discrete(labels=labs) +
      labs(x="Application", y="Execution Time in Seconds") +
      facet_wrap(.~apps, scales="free")+
      theme(strip.background = element_blank(),
            strip.text.x = element_blank())
     

#+end_src

#+RESULTS:
[[file:R/PLOTS/Alya-IMB.png]]
